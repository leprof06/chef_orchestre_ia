import os
import subprocess
import logging
from orchestrator import PROJECT_FOLDER
from core.install_utils import check_and_install_packages
from detection.capability_detector import detect_capabilities
from analysis.utils import load_json_file

logger = logging.getLogger("auto_fixer")

AUTO_FIX_LOG = os.path.join(PROJECT_FOLDER, "rapports", "auto_fixer_log.txt")

# üì¶ D√©pendances de base qu'on pourrait d√©tecter dans les projets
DEFAULT_REQUIRED_PACKAGES = ["flask", "openai", "requests", "dotenv", "pytest"]


def log_auto_fix(message):
    with open(AUTO_FIX_LOG, "a", encoding="utf-8") as f:
        f.write(message + "\n")
    logger.info(message)


def auto_fix_project(project_path):
    log_auto_fix(f"üß† Tentative de correction automatique pour {project_path}")

    # √âtape 1 : installer les d√©pendances principales
    check_and_install_packages(*DEFAULT_REQUIRED_PACKAGES)
    log_auto_fix("‚úÖ D√©pendances principales install√©es")

    # √âtape 2 : lancer les tests
    try:
        result = subprocess.run(["pytest", project_path], capture_output=True, text=True)
        log_auto_fix("üîç R√©sultat des tests :")
        log_auto_fix(result.stdout)

        if result.returncode == 0:
            log_auto_fix("‚úÖ Tous les tests sont pass√©s avec succ√®s.")
            return True
        else:
            log_auto_fix("‚ö†Ô∏è Des tests ont √©chou√©. Tentative de correction IA possible...")
            # ‚ûï ICI tu pourras appeler ta fonction generate_code_proposal() si besoin
            # (√† int√©grer dans la suite de l‚Äôautomatisation si autoris√©)
            return False

    except Exception as e:
        log_auto_fix(f"‚ùå Erreur lors du test : {e}")
        return False


def auto_fix_all_projects():
    for name in os.listdir(PROJECT_FOLDER):
        full_path = os.path.join(PROJECT_FOLDER, name)
        if os.path.isdir(full_path):
            auto_fix_project(full_path)


if __name__ == "__main__":
    auto_fix_all_projects()
